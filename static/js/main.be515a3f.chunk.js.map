{"version":3,"sources":["components/node/Node.jsx","components/algorithms/Dijkstra.js","images/PathfinderLogo.png","components/menu/Menu.jsx","components/grid/Grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","row","col","isStart","isFinish","isWall","isCorner","onMouseUp","onMouseEnter","onMouseDown","isVisited","id","className","updateUnvisitedNodes","closestNode","grid","unvisitedNeighbours","node","neighbours","push","length","filter","neighbour","getUnvisitedNeighbours","distance","previousNode","console","log","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","Menu","resetGrid","visualiseDijkstras","algorithms","setCurrentAlgorithm","href","src","logo","xmlns","viewBox","d","class","map","algorithm","onClick","Grid","useState","setGrid","isMousePressed","setIsMousePressed","START_NODE_ROW","setSTARTNODEROW","START_NODE_COL","setSTARTNODECOL","FINISH_NODE_ROW","setFINISHNODEROW","FINISH_NODE_COL","setFINISHNODECOL","currAlgorithm","movingStart","setMovingStart","movingFinish","setMovingFinish","generateGrid","currentRow","createNode","Infinity","setFinishNode","newGrid","slice","oldNode","oldFinishNode","newFinishNode","setStartNode","oldStart","oldStartNode","newStartNode","newGridToggleWall","newNode","animateDijkstras","visitedNodesInOrder","nodesInShortestOrder","i","setTimeout","document","getElementById","animateShortestPath","useEffect","startNode","finishNode","nodes","forEach","getAllNodes","shift","Dijkstra","currentNode","unshift","getNodesInShortestOrder","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.be515a3f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Node({row, col, isStart, isFinish, isWall, isCorner, onMouseUp, onMouseEnter, onMouseDown, isVisited}){\r\n    return(\r\n        <div \r\n            id={`node-${row}-${col}`}\r\n            onMouseDown={() => onMouseDown(row, col)} \r\n            onMouseUp={() => onMouseUp()} \r\n            onMouseEnter={() => onMouseEnter(row, col)} \r\n            className={`node \r\n            ${isStart ? \"bg-green-700\": \"\"} \r\n            ${isFinish ? \"bg-red-800\": \"\"} \r\n            ${isCorner ? \"rounded-xlg\" : \"\"}\r\n            ${isVisited ? \"node-visited\" : \"\"}\r\n            ${isWall ? \"bg-purple-300\": \"\"}`}>\r\n        </div>\r\n    );\r\n}\r\n","export function Dijkstra(grid, startNode, finishNode){\r\n\r\n   const visitedNodesInOrder = [];  \r\n   startNode.distance = 0;\r\n   const unvisitedNodes = getAllNodes(grid);\r\n   while(!!unvisitedNodes.length){\r\n        //sort all nodes by distance (shortest 1st in list) then use\r\n        //shift to remove first element and return it (closestNode = sortedNodes[0])\r\n       sortNodesByDistance(unvisitedNodes); \r\n       const closestNode = unvisitedNodes.shift();\r\n\r\n        //skip if its a wall\r\n       if(closestNode.isWall)\r\n            continue;\r\n\r\n\r\n        if(closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n\r\n        if(closestNode === finishNode) return visitedNodesInOrder;\r\n        updateUnvisitedNodes(closestNode, grid);\r\n   }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nfunction updateUnvisitedNodes(closestNode, grid){\r\n    const unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for(const neighbour of unvisitedNeighbours){\r\n        neighbour.distance = closestNode.distance + 1;\r\n        neighbour.previousNode = closestNode;\r\n    }\r\n    console.log(unvisitedNeighbours);\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid){\r\n    const neighbours = [];\r\n    const {row, col} = node;\r\n    if(row > 0) neighbours.push(grid[row - 1][col]);\r\n    if(row < grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n    //node above current node\r\n    if(col > 0) neighbours.push(grid[row][col-1]);\r\n    if(col < grid[0].length - 1) neighbours.push(grid[row][col+1]);\r\n    \r\n    return neighbours.filter(neighbour => !neighbour.isVisited);\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes){\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getAllNodes(grid){\r\n    const nodes = [];\r\n    grid.forEach(row => {\r\n        row.forEach(node => {\r\n           nodes.push(node); \r\n        });\r\n    });\r\n    return nodes;\r\n}\r\n\r\nexport function getNodesInShortestOrder(finishNode){\r\n    const nodesInShortestOrder = [];\r\n    let currentNode = finishNode;\r\n    while(currentNode != null){\r\n        nodesInShortestOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestOrder;\r\n    \r\n}\r\n","export default __webpack_public_path__ + \"static/media/PathfinderLogo.03ce4706.png\";","import React from \"react\";\r\nimport logo from \"../../images/PathfinderLogo.png\";\r\nexport default function Menu({resetGrid, visualiseDijkstras, algorithms, setCurrentAlgorithm}){\r\n    return(\r\n        <nav className=\"bg-gray-300 shadow-lg\">\r\n            <div className=\"max-w-6xl mx-auto px-4\">\r\n                <div className=\"flex justify-between\">\r\n                    <div className=\"flex space-x-7\">\r\n                        <div>\r\n                            <a href=\"/\" className=\"flex items-center py-4 px-2\">\r\n                                \r\n                                <img className=\"w-10 h-10 \" src={logo}></img>\r\n                            </a>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"hidden md:flex items-center space-x-1\">\r\n\t\t\t\t\t\t<h1 className=\"cursor-pointer py-4 px-2 text-green-800 border-b-4 border-green-800 font-semibold \">Home</h1>\r\n\r\n                        <div className=\"dropdown inline-block relative\">\r\n                            <button className=\"bg-gray-300 text-gray-700 font-semibold py-2 px-4 rounded inline-flex items-center\">\r\n                              <span className=\"mr-1\">Algorithms</span>\r\n                              <svg className=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\"><path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\"/> </svg>\r\n                            </button>\r\n                            <ul class=\"dropdown-menu absolute hidden text-gray-700 pt-1 shadow-lg\">\r\n                                {algorithms.map(algorithm => {\r\n                                    return (\r\n                                        <li className=\"\" onClick={setCurrentAlgorithm(algorithm)}><h1 className=\"rounded bg-gray-200 hover:bg-green-800 hover:text-white text-center cursor-pointer py-2 px-8 block whitespace-no-wrap\">{algorithm}</h1></li>\r\n\r\n                                    );\r\n                                })}\r\n                            </ul>\r\n                          </div>\r\n\r\n\r\n                          <a href=\"/about\" className=\"cursor-pointer py-4 px-2 text-gray-700 font-semibold hover:text-green-800 transition duration-300\" >About</a > \r\n                        \r\n\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={visualiseDijkstras} className=\"bg-green-800 rounded p-2 m-2 text-white\">Visualize Algorithm</button>\r\n                        {/* <button onClick={resetGrid} className=\"bg-green-800 rounded p-2 m-2 text-white\">Reset Grid</button> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n","import React, {useState, useEffect} from \"react\";\r\nimport Node from \"../node/Node.jsx\";\r\nimport { Dijkstra, getNodesInShortestOrder } from \"../algorithms/Dijkstra.js\";\r\nimport Menu from \"../menu/Menu.jsx\";\r\n{/* import { MyDijkstra, getNodesInShortestOrder } from \"../algorithms/MyDijkstra.js\"; */}\r\n\r\nexport default function Grid(){\r\n    const [grid, setGrid] = useState([]);\r\n    const [isMousePressed, setIsMousePressed] = useState(false);\r\n    const [START_NODE_ROW, setSTARTNODEROW] = useState(10);\r\n    const [START_NODE_COL, setSTARTNODECOL] = useState(15);\r\n    const [FINISH_NODE_ROW, setFINISHNODEROW] = useState(10);\r\n    const [FINISH_NODE_COL, setFINISHNODECOL] = useState(35);\r\n    const [algorithms, setAlgorithms] = useState([\"Dijkstras\", \"More in Development\"]);\r\n    const [currAlgorithm, setCurrentAlgorithm] = useState(\"\");\r\n\r\n    const [movingStart, setMovingStart] = useState(false);\r\n    const [movingFinish, setMovingFinish] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        setGrid(generateGrid);\r\n    }, []);\r\n\r\n    function generateGrid(){\r\n        const grid = [];\r\n        for(let row = 0; row < 20; row++){\r\n           const currentRow = [];\r\n           for(let col = 0; col < 50; col++){\r\n               currentRow.push(createNode(col, row)); \r\n           }\r\n           grid.push(currentRow);\r\n\r\n        }\r\n        return grid;\r\n    }\r\n\r\n    function createNode(col, row){\r\n        return {\r\n            col,\r\n            row,\r\n            isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n            isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n            isWall: false,\r\n            distance: Infinity,\r\n            previousNode: null,\r\n            isVisited: false,\r\n        }\r\n\r\n    }\r\n\r\n    function setFinishNode(grid, row, col){\r\n        const newGrid = grid.slice();\r\n        const node = newGrid[row][col];\r\n        const oldNode = newGrid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        const oldFinishNode = {\r\n            ...oldNode,\r\n            isFinish: false,\r\n        };\r\n        setFINISHNODEROW(row);\r\n        setFINISHNODECOL(col);\r\n        const newFinishNode = {\r\n            ...node,\r\n            isFinish: true,\r\n        };\r\n\r\n        newGrid[FINISH_NODE_ROW][FINISH_NODE_COL] = oldFinishNode;\r\n        newGrid[row][col] = newFinishNode;\r\n        return newGrid;\r\n\r\n    }\r\n\r\n    \r\n    function setStartNode(grid, row, col){\r\n        const newGrid = grid.slice();\r\n        const node = newGrid[row][col];\r\n        const oldStart = newGrid[START_NODE_ROW][START_NODE_COL];\r\n        const oldStartNode = {\r\n            ...oldStart,\r\n            isStart: false,\r\n        };\r\n        setSTARTNODEROW(row);\r\n        setSTARTNODECOL(col);\r\n        const newStartNode = {\r\n            ...node,\r\n            isStart: true,\r\n        };\r\n\r\n        newGrid[START_NODE_ROW][START_NODE_COL] = oldStartNode;\r\n        newGrid[row][col] = newStartNode;\r\n        return newGrid;\r\n\r\n    }\r\n\r\n    function handleMouseEnter(row, col){\r\n        //if we are moving the start node\r\n        if(movingStart){\r\n            //new -------------------\r\n            const newGrid = setStartNode(grid, row, col);\r\n            setGrid(newGrid);\r\n            //end new\r\n            //old\r\n            {/* animateStartNodeMove(row, col); */}\r\n        }\r\n        else if(movingFinish){\r\n            const newGrid = setFinishNode(grid, row, col);\r\n            setGrid(newGrid);\r\n        }\r\n        else {\r\n            if(!isMousePressed) return;\r\n            const newGrid = newGridToggleWall(grid, row, col);\r\n            setGrid(newGrid);\r\n\r\n        }\r\n    }\r\n\r\n    function handleMouseDown(row, col){\r\n        setIsMousePressed(true);\r\n        if(row === START_NODE_ROW && col === START_NODE_COL)\r\n            setMovingStart(true);\r\n        else if(row === FINISH_NODE_ROW && col === FINISH_NODE_COL)\r\n            setMovingFinish(true);\r\n        else{\r\n            const newGrid = newGridToggleWall(grid, row, col);\r\n            setGrid(newGrid); \r\n        }\r\n\r\n    }\r\n\r\n    function newGridToggleWall(grid, row, col){\r\n        const newGrid = grid.slice();\r\n        const node = newGrid[row][col];\r\n        const newNode = {\r\n            ...node,\r\n            isWall: !node.isWall,\r\n        };\r\n        newGrid[row][col] = newNode;\r\n        return newGrid;\r\n    }\r\n\r\n    function handleMouseUp(){\r\n       setIsMousePressed(false);  \r\n        if(movingStart) {\r\n            console.log(START_NODE_ROW);\r\n            setStartNode(grid, START_NODE_ROW, START_NODE_COL);\r\n            setMovingStart(false);\r\n        }\r\n        if(movingFinish) {\r\n            setMovingFinish(false);\r\n            setFinishNode(grid, FINISH_NODE_ROW, FINISH_NODE_COL);\r\n        }\r\n    }\r\n\r\n\r\n    function animateShortestPath(nodesInShortestOrder){\r\n        for(let i = 0; i < nodesInShortestOrder.length; i++){\r\n            const node = nodesInShortestOrder[i];\r\n            setTimeout(() => {\r\n                document.getElementById(`node-${node.row}-${node.col}`).className=\"node shortest-path\";\r\n            }, 50 * i);\r\n        }\r\n    }\r\n\r\n    function animateDijkstras(visitedNodesInOrder, nodesInShortestOrder){\r\n        for(let i = 0; i <= visitedNodesInOrder.length; i++){\r\n            if(i === visitedNodesInOrder.length){\r\n                setTimeout(() => {\r\n                    animateShortestPath(nodesInShortestOrder);\r\n                }, 10 * i);\r\n                return;     \r\n            }\r\n            setTimeout(() => {\r\n            const node = visitedNodesInOrder[i]; \r\n                document.getElementById(`node-${node.row}-${node.col}`).className=\"node node-visited\";\r\n                \r\n            }, 10 * i);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    function visualiseDijkstras(){\r\n        if(currAlgorithm === \"Dijkstras\"){\r\n            const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n            const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n            const visitedNodesInOrder = Dijkstra(grid, startNode, finishNode);\r\n            const nodesInShortestOrder = getNodesInShortestOrder(finishNode);\r\n\r\n            animateDijkstras(visitedNodesInOrder, nodesInShortestOrder);\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return(\r\n       <section id=\"app\"> \r\n        <Menu setCurrentAlgorithm={setCurrentAlgorithm} visualiseDijkstras={visualiseDijkstras} algorithms={algorithms}/>\r\n\r\n\r\n        {/* --------------------------------- key ------------------------------------------------------------ */}\r\n        <div className=\"flex flex-row justify-center mt-4\">\r\n            <div className=\"flex pt-4\">\r\n                <h1 className=\"mx-6\">Start Node:</h1><Node isStart={true}/>\r\n            </div>\r\n            <div className=\"flex pt-4\">\r\n                <h1 className=\"mx-6\">Finish Node:</h1><Node isFinish={true}/>\r\n            </div>\r\n            <div className=\"flex pt-4\">\r\n                <h1 className=\"mx-6\">Wall Node:</h1><Node isWall={true}/>\r\n            </div>\r\n            <div className=\"flex pt-4\">\r\n                <h1 className=\"mx-6\">Shorted Path:</h1><div className=\"node shortest-path\"></div>\r\n            </div>\r\n        </div>\r\n        {/* --------------------------------- key ------------------------------------------------------------ */}\r\n\r\n\r\n\r\n\r\n        <div className=\"m-22 select-none 2xl:m-24\">\r\n            {/* <button onClick={visualiseDijkstras} className=\"bg-green-800 rounded p-2 text-white m-4\">Visualize Algorithm</button> */}\r\n            {grid.map((row, rowIdx) => {\r\n               return <div key={rowIdx} className=\"font-none\"> \r\n                   {row.map((node, nodeIdx) => {\r\n                        const {row, col, isWall, isStart, isFinish} = node;\r\n                        return (\r\n                            <Node\r\n                            key={nodeIdx}\r\n                            row={row}\r\n                            col={col}\r\n                            isMousePressed={isMousePressed}\r\n                            onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                            onMouseEnter={(row, col) => handleMouseEnter(row, col)}\r\n                            onMouseUp={() => handleMouseUp()}\r\n                            isWall={isWall}\r\n                            isStart={isStart}\r\n                            isFinish={isFinish}>\r\n                            </Node>\r\n                        );\r\n                   })}\r\n                </div>\r\n            })} \r\n        </div>\r\n    </section>\r\n    );\r\n}\r\n","import './App.css';\nimport { useState } from 'react';\nimport { BrowserRouter} from 'react-router-dom';\nimport Grid from \"./components/grid/Grid.jsx\";\n\nfunction App() {\n    const [algorithmSelected, setAlgorithm] = useState(\"Dijkstras\");\n\n\n  return (\n    <div className=\"App\">\n        <BrowserRouter>\n            <Grid/>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}